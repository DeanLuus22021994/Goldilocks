name: "Generate Documentation"

on:
  push:
    branches: ["main", "develop"]
    paths:
      - "src/**"
      - "docs/**"
      - "README.md"
      - "requirements.txt"
      - ".github/workflows/docs.yml"
  pull_request:
    branches: ["main"]
    paths:
      - "src/**"
      - "docs/**"
      - "README.md"
      - "requirements.txt"
  schedule:
    # Regenerate documentation daily at 2:00 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    # Allow manual triggering

jobs:
  generate-docs:
    name: "Generate Modern Documentation"
    runs-on: ubuntu-latest

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          # Fetch full history for accurate metrics
          fetch-depth: 0

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: 'pip'

      - name: "Install dependencies"
        run: |
          python -m pip install --upgrade pip
          pip install markitdown
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: "Generate documentation"
        run: |
          echo "üöÄ Generating modern documentation..."
          python docs/generate.py
          echo "‚úÖ Documentation generation complete"

      - name: "Check for changes"
        id: changes
        run: |
          if git diff --quiet HEAD -- docs/; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No documentation changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Documentation changes detected"
          fi

      - name: "Show changes"
        if: steps.changes.outputs.changed == 'true'
        run: |
          echo "üìù Documentation changes:"
          git diff --name-only HEAD -- docs/
          git diff --stat HEAD -- docs/

      - name: "Commit updated documentation"
        if: steps.changes.outputs.changed == 'true' && github.event_name != 'pull_request'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git commit -m "docs: auto-generate documentation [skip ci]

          Generated by GitHub Actions using markitdown
          - Updated STRUCTURE.md with current project metrics
          - Updated TECHNICAL.md with system information

          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}"
          git push

      - name: "Upload documentation artifacts"
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: generated-documentation
          path: |
            docs/STRUCTURE.md
            docs/TECHNICAL.md
          retention-days: 30

      - name: "Validate documentation quality"
        run: |
          echo "üîç Validating documentation quality..."

          # Check if documentation files exist
          test -f docs/STRUCTURE.md || { echo "‚ùå STRUCTURE.md not found"; exit 1; }
          test -f docs/TECHNICAL.md || { echo "‚ùå TECHNICAL.md not found"; exit 1; }

          # Check minimum content requirements
          if [ $(wc -l < docs/STRUCTURE.md) -lt 50 ]; then
            echo "‚ùå STRUCTURE.md too short (< 50 lines)"
            exit 1
          fi

          if [ $(wc -l < docs/TECHNICAL.md) -lt 30 ]; then
            echo "‚ùå TECHNICAL.md too short (< 30 lines)"
            exit 1
          fi

          # Check for required sections
          grep -q "## Project Metrics" docs/STRUCTURE.md || { echo "‚ùå Missing Project Metrics section"; exit 1; }
          grep -q "## System Information" docs/TECHNICAL.md || { echo "‚ùå Missing System Information section"; exit 1; }

          echo "‚úÖ Documentation quality validation passed"

      - name: "Comment on PR"
        if: github.event_name == 'pull_request' && steps.changes.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'üìö **Documentation Updated**\n\nThe documentation has been automatically regenerated based on your changes.\n\n**Generated files:**\n- `docs/STRUCTURE.md` - Project structure and metrics\n- `docs/TECHNICAL.md` - Technical specifications\n\nThese files will be committed automatically when this PR is merged.'
            })
