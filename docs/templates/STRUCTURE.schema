{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "Goldilocks Project Structure Documentation Schema",
  "description": "Schema for generating project structure documentation following SRP and DRY principles",
  "properties": {
    "metadata": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "const": "goldilocks.structure"
        },
        "title": {
          "type": "string",
          "const": "Project Structure"
        },
        "description": {
          "type": "string",
          "const": "Comprehensive file organization, module descriptions, and dependency mapping for Goldilocks"
        },
        "author": {
          "type": "string",
          "const": "Goldilocks Development Team"
        },
        "build_timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "ISO 8601 timestamp when document was generated"
        },
        "custom": {
          "type": "string",
          "const": "copilot-optimized"
        }
      },
      "required": ["uid", "title", "description", "author", "build_timestamp", "custom"]
    },
    "content": {
      "type": "object",
      "properties": {
        "tree_output": {
          "type": "string",
          "description": "Directory tree structure output from tree command"
        },
        "dependencies_info": {
          "type": "object",
          "properties": {
            "python_dependencies": {
              "type": "integer",
              "description": "Number of Python dependencies from requirements.txt"
            },
            "node_dependencies": {
              "type": "integer",
              "description": "Number of Node.js dependencies from package.json"
            },
            "dev_dependencies": {
              "type": "integer",
              "description": "Number of Node.js dev dependencies"
            }
          }
        },
        "system_metrics": {
          "type": "object",
          "properties": {
            "python_version": {
              "type": "string",
              "pattern": "^\\d+\\.\\d+\\.\\d+$"
            },
            "flask_version": {
              "type": "string"
            },
            "docker_version": {
              "type": "string"
            },
            "git_info": {
              "type": "object",
              "properties": {
                "branch": {
                  "type": "string"
                },
                "commit": {
                  "type": "string",
                  "pattern": "^[a-f0-9]{7,40}$"
                }
              }
            }
          }
        },
        "project_assets": {
          "type": "object",
          "properties": {
            "test_count": {
              "type": "integer",
              "minimum": 0
            },
            "python_files": {
              "type": "integer",
              "minimum": 0
            },
            "template_count": {
              "type": "integer",
              "minimum": 0
            },
            "css_count": {
              "type": "integer",
              "minimum": 0
            }
          }
        }
      },
      "required": ["tree_output", "dependencies_info", "system_metrics", "project_assets"]
    },
    "template": {
      "type": "string",
      "description": "Markdown template with placeholders for generated content",
      "const": "---\nuid: {{metadata.uid}}\ntitle: {{metadata.title}}\ndescription: {{metadata.description}}\nauthor: {{metadata.author}}\nms.date: {{metadata.build_timestamp}}\nms.custom: {{metadata.custom}}\n---\n\n# Project Structure\n\n> [!IMPORTANT]\n> This structure is automatically generated during documentation builds to ensure accuracy.\n> Last updated: {{metadata.build_timestamp}}\n> Follows MODERNIZE, DRY, SRP, STRUCTURED principles from Copilot Instructions.\n\n## 📁 Directory Structure\n\n```text\n{{content.tree_output}}\n```\n\n## 📊 Project Metrics\n\n### Dependencies\n- **Python Dependencies**: {{content.dependencies_info.python_dependencies}} packages\n- **Node.js Dependencies**: {{content.dependencies_info.node_dependencies}} production, {{content.dependencies_info.dev_dependencies}} development\n\n### System Information\n| Component | Version | Status |\n|-----------|---------|--------|\n| Python | {{content.system_metrics.python_version}} | ✅ |\n| Flask | {{content.system_metrics.flask_version}} | ✅ |\n| Docker | {{content.system_metrics.docker_version}} | ✅ |\n| Git | {{content.system_metrics.git_info.branch}}@{{content.system_metrics.git_info.commit}} | ✅ |\n\n### Project Assets\n| Asset Type | Count | Status |\n|------------|-------|---------|\n| Tests | {{content.project_assets.test_count}} files | {{content.project_assets.test_count > 0 ? '✅' : '⚠️'}} |\n| Python Files | {{content.project_assets.python_files}} files | {{content.project_assets.python_files > 0 ? '✅' : '❌'}} |\n| Templates | {{content.project_assets.template_count}} files | {{content.project_assets.template_count > 0 ? '✅' : '❌'}} |\n| CSS Files | {{content.project_assets.css_count}} files | {{content.project_assets.css_count > 0 ? '✅' : '❌'}} |\n\n## 🏗️ File Organization Principles\n\n> Following **Single Responsibility Principle (SRP)** - each directory serves one clear purpose\n\n### 🔧 Configuration Files (`config/`)\n- **Purpose**: Centralized tool configurations following SRP\n- **Structure**: Original files in config/, copies in root only when required by tools\n- **Examples**: pytest, mypy, flake8, cypress, pre-commit configurations\n- **Copilot Context**: All configuration patterns documented for AI development assistance\n- **Standards**: STANDARDIZATION principle - consistent configuration patterns\n\n### 📚 Documentation (`docs/`)\n- **Purpose**: Comprehensive project documentation with automated build system\n- **Structure**: README.md copied to root for GitHub compatibility\n- **Features**: DocFX integration, cross-references, API documentation\n- **Copilot Context**: Enhanced with metadata and structured content for AI parsing\n- **Standards**: MODERNIZE principle - latest DocFX features and best practices\n\n### 🏗️ Infrastructure (`infrastructure/`)\n- **Purpose**: Container definitions and deployment configurations\n- **Structure**: Multi-stage Dockerfiles, environment-specific overrides\n- **Features**: Docker Compose profiles, Kubernetes manifests (future)\n- **Copilot Context**: Infrastructure as Code patterns with comprehensive comments\n- **Standards**: LIGHTWEIGHT and LOW FOOTPRINT principles\n\n### 🐳 Docker Scripts (`infrastructure/docker/scripts/`)\n- **Purpose**: Build automation and container management\n- **Structure**: Modular scripts for different deployment scenarios\n- **Features**: Development utilities, testing automation, deployment management\n- **Environment**: Linux-based DevContainer optimized workflows\n- **Standards**: IDEMPOTENCY principle - scripts produce same result when run multiple times\n\n### 💻 Source Code (`src/`)\n- **Purpose**: All Python source code following src layout best practices\n- **Structure**: Main package in `src/goldilocks/`, tests in `src/goldilocks/tests/`\n- **Standards**: Type hints, docstrings, comprehensive test coverage (100% target)\n- **Copilot Context**: Structured for optimal AI code understanding and generation\n- **Principles**: SOLID principles, DRY, HIGH COMPATIBILITY\n\n### 🎨 Frontend Assets (`frontend/`)\n- **Purpose**: Static assets and template system\n- **Structure**: Modular CSS architecture, reusable templates, modern JavaScript\n- **Features**: Responsive design, accessibility support, theme system\n- **Copilot Context**: Component-based architecture with clear separation of concerns\n- **Standards**: MODERNIZE principle - latest web standards and practices\n\n## 🚀 Development Workflow Guide\n\n> Optimized for GitHub Copilot development following repository standards\n\n### For AI-Assisted Development\n1. **Context Awareness**: All files include structured metadata for AI understanding\n2. **Pattern Recognition**: Consistent coding patterns documented throughout\n3. **Test-Driven**: Comprehensive test structure for AI-assisted development\n4. **Documentation**: Inline documentation optimized for AI context understanding\n5. **Separation of Concerns**: No cross-cutting concerns between modules\n\n### Core Development Commands\n```bash\n# Following MODERNIZE and LIGHTWEIGHT principles\nmake dev                    # Start optimized development environment\npython -m pytest           # 100% test coverage requirement\npre-commit run --all-files  # Code quality validation (zero violations)\n./docs/build.sh            # Generate documentation\n```\n\n### Quality Standards\n- **100% test coverage** - All code paths must be tested\n- **Type hints** - Python type annotations for all functions and methods\n- **Linting compliance** - Zero flake8, mypy, black, isort violations\n- **Documentation** - Docstrings for all public functions\n\n## 🤖 AI Development Features\n\n### GitHub Copilot Integration\n- **Structured Metadata**: Enhanced YAML frontmatter in all documentation\n- **Cross-References**: Comprehensive linking for context understanding\n- **Pattern Documentation**: Code patterns explained for AI learning\n- **Test Examples**: Comprehensive test cases as AI training examples\n- **No Cross-Cutting Concerns**: Clear separation between modules\n\n### Development Principles Applied\n- **MODERNIZE**: Latest stable versions, current best practices\n- **DRY**: Abstracted common patterns, reusable components\n- **SRP**: One purpose per function/class/directory\n- **STRUCTURED**: Organized, predictable, maintainable architecture\n- **STANDARDIZATION**: Consistent coding style and conventions\n\n## 📋 Cross-References\n\nFor detailed technical specifications, see [Technical Documentation](xref:goldilocks.technical).\nFor Docker infrastructure details, see [Docker Guide](xref:goldilocks.docker).\nFor development guidelines, see [Copilot Instructions](../.github/copilot-instructions.md)."
    }
  },
  "required": ["metadata", "content", "template"]
}
