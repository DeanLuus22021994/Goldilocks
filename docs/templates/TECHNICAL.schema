{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "type": "object",
  "title": "Goldilocks Technical Specifications Documentation Schema",
  "description": "Schema for generating technical specifications following MODERNIZE, DRY, SRP principles",
  "properties": {
    "metadata": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "const": "goldilocks.technical"
        },
        "title": {
          "type": "string",
          "const": "Technical Specifications"
        },
        "description": {
          "type": "string",
          "const": "Comprehensive architecture, performance metrics, and development commands for Goldilocks"
        },
        "author": {
          "type": "string",
          "const": "Goldilocks Development Team"
        },
        "build_timestamp": {
          "type": "string",
          "format": "date-time"
        },
        "custom": {
          "type": "string",
          "const": "copilot-technical-reference"
        }
      },
      "required": ["uid", "title", "description", "author", "build_timestamp", "custom"]
    },
    "content": {
      "type": "object",
      "properties": {
        "system_status": {
          "type": "object",
          "properties": {
            "python": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string",
                  "pattern": "^\\d+\\.\\d+\\.\\d+$"
                },
                "status": {
                  "type": "string",
                  "enum": ["‚úÖ", "‚ùå", "‚ö†Ô∏è"]
                },
                "path": {
                  "type": "string"
                }
              }
            },
            "flask": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": ["‚úÖ", "‚ùå", "‚ö†Ô∏è"]
                }
              }
            },
            "docker": {
              "type": "object",
              "properties": {
                "version": {
                  "type": "string"
                },
                "status": {
                  "type": "string",
                  "enum": ["‚úÖ", "‚ùå", "‚ö†Ô∏è"]
                }
              }
            },
            "git": {
              "type": "object",
              "properties": {
                "branch": {
                  "type": "string"
                },
                "commit": {
                  "type": "string",
                  "pattern": "^[a-f0-9]{7,40}$"
                },
                "status": {
                  "type": "string",
                  "const": "‚úÖ"
                }
              }
            }
          }
        },
        "project_assets": {
          "type": "object",
          "properties": {
            "tests": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "minimum": 0
                },
                "status": {
                  "type": "string",
                  "enum": ["‚úÖ", "‚ùå", "‚ö†Ô∏è"]
                }
              }
            },
            "python_files": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "minimum": 0
                },
                "status": {
                  "type": "string",
                  "enum": ["‚úÖ", "‚ùå", "‚ö†Ô∏è"]
                }
              }
            },
            "templates": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "minimum": 0
                },
                "status": {
                  "type": "string",
                  "enum": ["‚úÖ", "‚ùå", "‚ö†Ô∏è"]
                }
              }
            },
            "css_files": {
              "type": "object",
              "properties": {
                "count": {
                  "type": "integer",
                  "minimum": 0
                },
                "status": {
                  "type": "string",
                  "enum": ["‚úÖ", "‚ùå", "‚ö†Ô∏è"]
                }
              }
            }
          }
        },
        "performance_benchmarks": {
          "type": "string",
          "description": "Performance benchmark data from latest benchmark file"
        }
      },
      "required": ["system_status", "project_assets"]
    },
    "template": {
      "type": "string",
      "description": "Markdown template with placeholders for generated content",
      "const": "---\nuid: {{metadata.uid}}\ntitle: {{metadata.title}}\ndescription: {{metadata.description}}\nauthor: {{metadata.author}}\nms.date: {{metadata.build_timestamp}}\nms.custom: {{metadata.custom}}\n---\n\n# Technical Specifications\n\n> [!NOTE]\n> Automatically generated technical reference for GitHub Copilot development workflows.\n> Last updated: {{metadata.build_timestamp}}\n> Adheres to MODERNIZE, DRY, SRP, STRUCTURED principles from Copilot Instructions.\n\n## üîß System Status\n\n| Component | Version | Status | Notes |\n|-----------|---------|---------|-------|\n| Python | {{content.system_status.python.version}} | {{content.system_status.python.status}} | {{content.system_status.python.path}} |\n| Flask | {{content.system_status.flask.version}} | {{content.system_status.flask.status}} | Web framework |\n| Docker | {{content.system_status.docker.version}} | {{content.system_status.docker.status}} | Containerization |\n| Git | {{content.system_status.git.branch}}@{{content.system_status.git.commit}} | {{content.system_status.git.status}} | Version control |\n\n## üìä Project Assets\n\n| Asset Type | Count | Status | Coverage |\n|------------|-------|--------|-----------|\n| Tests | {{content.project_assets.tests.count}} files | {{content.project_assets.tests.status}} | Target: 100% |\n| Python Files | {{content.project_assets.python_files.count}} files | {{content.project_assets.python_files.status}} | Type hints required |\n| Templates | {{content.project_assets.templates.count}} files | {{content.project_assets.templates.status}} | Responsive design |\n| CSS Files | {{content.project_assets.css_files.count}} files | {{content.project_assets.css_files.status}} | Modular architecture |\n\n## üèóÔ∏è Architecture Overview\n\n### ‚úÖ Completed Optimizations (Following Copilot Instructions)\n\n- [x] **Test Structure**: Comprehensive test suite in `src/goldilocks/tests/` (SRP)\n- [x] **Import System**: Zero import errors, 100% pytest compatibility (HIGH COMPATIBILITY)\n- [x] **DevContainer**: Optimized with volume caching and minimal features (LIGHTWEIGHT)\n- [x] **Docker Multi-Stage**: Separate build/tools/runtime images (LOW FOOTPRINT)\n- [x] **Python Bytecode**: Precompilation with optimization level 2 (MODERNIZE)\n- [x] **File Organization**: Domain-driven architecture following SRP\n- [x] **Caching System**: devcontainer-lock.json for reproducible builds (IDEMPOTENCY)\n- [x] **Documentation**: Auto-generated, Copilot-optimized documentation system (STANDARDIZATION)\n- [x] **No Cross-Cutting Concerns**: Clear separation between modules\n\n### üöÄ Performance Targets\n\n| Metric | Target | Current | Status |\n|--------|--------|---------|--------|\n| Startup Time | <100ms | TBD | üìä |\n| Response Time | <50ms | TBD | üìä |\n| Image Size | <100MB | TBD | üìä |\n| Test Execution | <5s | TBD | üìä |\n| DevContainer Rebuild | <30s | Optimized | ‚úÖ |\n\n### üìà Performance Benchmarks\n\n```\n{{content.performance_benchmarks}}\n```\n\n## üíª Development Commands\n\n> Following MODERNIZE and LIGHTWEIGHT principles from Copilot Instructions\n\n### Essential Operations\n```bash\n# Core Development (100% test coverage requirement)\npython -m pytest                    # Run comprehensive test suite\nnpm run test:e2e                   # E2E testing with Cypress\nflask run --host 0.0.0.0 --port 9000  # Development server\n\n# Code Quality (Zero violations requirement)\npre-commit run --all-files         # Complete quality checks\nmypy .                             # Static type checking (required)\nblack . && isort .                 # Code formatting (STANDARDIZATION)\n\n# Container Operations (LIGHTWEIGHT principle)\ndocker compose --profile dev up    # Development environment\ndocker compose --profile prod up   # Production deployment\n```\n\n### Advanced Build Operations\n```bash\n# Multi-stage Docker builds (LOW FOOTPRINT)\n./infrastructure/docker/scripts/compose.sh development build\n./infrastructure/docker/scripts/compose.sh production deploy\n\n# Performance and caching (IDEMPOTENCY)\n.devcontainer/scripts/generate-lock.sh        # Update cache manifest\n./infrastructure/docker/scripts/test-infrastructure.sh  # Infrastructure validation\n\n# Documentation (MODERNIZE)\n./docs/build.sh                    # Generate comprehensive documentation\n./docs/build.sh --serve            # Build and serve documentation\n```\n\n## üß™ Testing Strategy\n\n> Following 100% test coverage requirement from Copilot Instructions\n\n### Test Categories\n- **Unit Tests**: Individual function and method validation (SRP)\n- **Integration Tests**: API endpoint and workflow testing  \n- **E2E Tests**: Full user journey validation with Cypress\n- **Infrastructure Tests**: Container and deployment validation\n- **Performance Tests**: Load testing and optimization validation\n\n### Coverage Requirements\n- **Minimum**: 90% code coverage for all modules\n- **Target**: 95% coverage with comprehensive edge case testing\n- **Documentation**: 100% API documentation coverage\n- **Type Hints**: Required for all functions and methods\n\n## üîç Monitoring & Observability\n\n### Development Monitoring\n- **Structured Logging**: JSON format with correlation IDs\n- **Request Tracing**: X-Request-ID headers for debugging\n- **Performance Metrics**: Response time tracking and optimization\n- **Health Checks**: Comprehensive endpoint monitoring\n\n### Production Considerations\n- **Container Health**: Multi-stage health check implementations\n- **Resource Monitoring**: Memory and CPU usage optimization  \n- **Security**: Non-root execution, read-only filesystems\n- **Scalability**: Horizontal scaling patterns documented\n\n## üêõ Troubleshooting Guide\n\n### Common Development Issues\n\n| Issue | Symptoms | Quick Fix | Prevention |\n|-------|----------|-----------|------------|\n| Import Errors | Module not found errors | `python -m pytest src/goldilocks/tests/` | Use absolute imports (HIGH COMPATIBILITY) |\n| Container Slow | Rebuild takes >30s | Check devcontainer-lock.json cache | Regular cache maintenance (IDEMPOTENCY) |\n| Test Failures | Pytest failures | Verify config points to correct test directory | Automated CI validation |\n| Large Images | Docker image >100MB | Use multi-stage runtime target | Layer optimization (LOW FOOTPRINT) |\n| Bytecode Issues | Runtime optimization problems | Run `scripts/compile-bytecode.sh` | Automated build hooks (MODERNIZE) |\n\n### Performance Optimization\n\n1. **Container Optimization**: Multi-stage builds, layer caching, minimal base images (LOW FOOTPRINT)\n2. **Development Speed**: Hot reload, volume caches, persistent containers (LIGHTWEIGHT)\n3. **Resource Efficiency**: Memory limits, CPU constraints, optimized health checks\n4. **Build Performance**: Parallel builds, BuildKit cache mounts, dependency optimization\n\n## ü§ñ GitHub Copilot Integration\n\n> Optimized for AI-assisted development following Copilot Instructions\n\n### AI Development Features\n- **Structured Comments**: Enhanced code documentation for AI context\n- **Pattern Recognition**: Consistent architectural patterns throughout codebase  \n- **Test Examples**: Comprehensive test cases as AI training examples\n- **Documentation**: Inline documentation optimized for AI understanding\n- **No Cross-Cutting Concerns**: Clear separation between modules for better AI comprehension\n\n### Copilot Optimization Principles Applied\n- **MODERNIZE**: Latest stable versions, current best practices\n- **DRY**: Abstracted common patterns, reusable components\n- **SRP**: One purpose per function/class/module\n- **STRUCTURED**: Organized, predictable, maintainable architecture\n- **STANDARDIZATION**: Consistent coding style and conventions\n- **IDEMPOTENCY**: Operations produce same result when run multiple times\n- **SOLID**: All SOLID principles for clean, maintainable object-oriented design\n\n### Context Files and AI Integration\n- **Metadata**: Structured YAML frontmatter for context awareness\n- **Cross-References**: Comprehensive linking for relationship understanding\n- **Code Patterns**: Documented patterns for consistent AI suggestions\n- **Context Files**: .copilotignore and context documentation optimized\n\n## üìã Next Phase Roadmap\n\n### Immediate (Sprint 1) - Following MODERNIZE principle\n- [ ] Performance baseline measurement and optimization\n- [ ] API documentation generation and validation  \n- [ ] Comprehensive error handling implementation\n- [ ] Load testing and bottleneck identification\n\n### Short-term (Sprint 2-3) - Following STRUCTURED principle\n- [ ] Advanced monitoring and alerting implementation\n- [ ] Security audit and hardening\n- [ ] Kubernetes deployment manifests\n- [ ] Advanced caching strategies\n\n### Long-term (Sprint 4+) - Following SCALABLE principle\n- [ ] Multi-environment deployment automation\n- [ ] Advanced analytics and metrics collection\n- [ ] Microservices architecture evaluation (avoid if monolithic works)\n- [ ] Performance optimization at scale\n\n## üìã Cross-References\n\nFor project structure details, see [Project Structure](xref:goldilocks.structure).\nFor Docker infrastructure details, see [Docker Guide](xref:goldilocks.docker).\nFor development guidelines, see [Copilot Instructions](../.github/copilot-instructions.md)."
    }
  },
  "required": ["metadata", "content", "template"]
}
