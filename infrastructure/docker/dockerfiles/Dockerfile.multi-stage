# Goldilocks Multi-Stage Dockerfile - Optimized for instant subsequent builds
# This consolidates all stages in one file for maximum cache efficiency

ARG PYTHON_VERSION=3.13.7-trixie
ARG NODE_VERSION=22

# ============================================================================
# BUILDER STAGE - Base dependencies and virtual environment
# ============================================================================
FROM python:${PYTHON_VERSION} AS builder

# Set build arguments for cache optimization
ARG BUILDKIT_INLINE_CACHE=1
ARG PIP_NO_CACHE_DIR=0
ARG PIP_DISABLE_PIP_VERSION_CHECK=1
ARG TARGETPLATFORM
ARG BUILDPLATFORM

# Build environment optimization
ENV PYTHONUNBUFFERED=1 \
  PYTHONDONTWRITEBYTECODE=1 \
  PYTHONOPTIMIZE=2 \
  PIP_NO_INPUT=1 \
  PIP_TIMEOUT=100 \
  PIP_RETRIES=5

# Install system dependencies with aggressive caching
RUN --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
  --mount=type=cache,target=/var/cache/apt,sharing=locked \
  apt-get update && apt-get install -y --no-install-recommends \
  build-essential \
  git \
  curl \
  && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd --create-home --shell /bin/bash app

# Set working directory
WORKDIR /app

# Copy requirements first for maximum layer caching
COPY requirements.txt ./

# Create virtual environment with persistent cache
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  python -m venv /opt/venv \
  && /opt/venv/bin/pip install --upgrade pip setuptools wheel \
  && /opt/venv/bin/pip install -r requirements.txt

# Copy source files
COPY src/ ./src/
COPY pyproject.toml ./

# Pre-compile Python bytecode for faster startup
RUN /opt/venv/bin/python -m compileall -b src/ \
  && find src/ -name "*.py" -delete || true \
  && find src/ -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

# Set proper ownership
RUN chown -R app:app /app /opt/venv

# ============================================================================
# TOOLS STAGE - Development tools with aggressive caching
# ============================================================================
FROM builder AS tools

# Install development tools with cache
RUN --mount=type=cache,target=/root/.cache/pip,sharing=locked \
  /opt/venv/bin/pip install \
  pytest \
  pytest-cov \
  pytest-xdist \
  ruff \
  mypy \
  pre-commit \
  black \
  isort \
  flake8 \
  httpx

# Copy dev configs for caching
COPY .pre-commit-config.yaml pyproject.toml ./

# Setup pre-commit with cache (skip if git not available)
RUN --mount=type=cache,target=/root/.cache/pre-commit,sharing=locked \
  /opt/venv/bin/pre-commit install-hooks || echo "Pre-commit hooks setup skipped"

# ============================================================================
# RUNTIME STAGE - Production minimal image
# ============================================================================
FROM python:${PYTHON_VERSION}-slim AS runtime

# Runtime environment
ENV PYTHONUNBUFFERED=1 \
  PYTHONDONTWRITEBYTECODE=1 \
  PYTHONOPTIMIZE=2 \
  PATH="/opt/venv/bin:$PATH" \
  FLASK_APP=src.goldilocks.app \
  FLASK_ENV=production

# Install minimal runtime dependencies
RUN --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
  --mount=type=cache,target=/var/cache/apt,sharing=locked \
  apt-get update && apt-get install -y --no-install-recommends \
  curl \
  && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd --create-home --shell /bin/bash app

# Copy virtual environment and app
COPY --from=builder --chown=app:app /opt/venv /opt/venv
COPY --from=builder --chown=app:app /app /app

# Copy static assets
COPY --chown=app:app frontend/static/ /app/static/

USER app
WORKDIR /app
EXPOSE 9000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:9000/health || exit 1

CMD ["python", "-m", "gunicorn", "--bind", "0.0.0.0:9000", "--workers", "2", "src.goldilocks.app:app"]

# ============================================================================
# DEVCONTAINER STAGE - Development environment optimized for VS Code
# ============================================================================
FROM tools AS devcontainer

# Switch back to root for devcontainer setup
USER root

# Install additional development dependencies with cache
RUN --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
  --mount=type=cache,target=/var/cache/apt,sharing=locked \
  apt-get update && apt-get install -y --no-install-recommends \
  sudo \
  zsh \
  vim \
  less \
  && rm -rf /var/lib/apt/lists/*

# Configure sudo for app user
RUN echo 'app ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers

# Set up PATH for development
ENV PATH="/opt/venv/bin:$PATH" \
  FLASK_APP=src.goldilocks.app \
  FLASK_ENV=development \
  FLASK_DEBUG=1 \
  PYTHONPATH="/workspaces/Goldilocks/src"

# Create cache directories
RUN mkdir -p /tmp/goldilocks-cache/{pip,npm,pre-commit,mypy,pytest,ruff} \
  && chown -R app:app /tmp/goldilocks-cache

# Switch to app user for development
USER app
WORKDIR /workspaces/Goldilocks

# Default command for devcontainer
CMD ["/bin/bash"]
