# Goldilocks Ultra-Performance Multi-Stage Dockerfile
# Optimized for instant subsequent builds with GPU acceleration and aggressive caching
# Adheres strictly to Copilot Instructions: MODERNIZE, DRY, LIGHTWEIGHT, HIGH COMPATIBILITY

ARG PYTHON_VERSION=3.14.0rc3-trixie
ARG NODE_VERSION=22

# ============================================================================
# BUILDER STAGE - Ultra-optimized base with GPU BuildKit acceleration
# ============================================================================
FROM python:${PYTHON_VERSION} AS builder

# Performance-critical build arguments
ARG BUILDKIT_INLINE_CACHE=1
ARG PIP_NO_CACHE_DIR=0
ARG PIP_DISABLE_PIP_VERSION_CHECK=1
ARG TARGETPLATFORM
ARG BUILDPLATFORM
ARG BUILDX_EXPERIMENTAL=1

# Ultra-performance environment variables (LIGHTWEIGHT principle)
ENV PYTHONUNBUFFERED=1 \
  PYTHONDONTWRITEBYTECODE=1 \
  PYTHONOPTIMIZE=2 \
  PIP_NO_INPUT=1 \
  PIP_TIMEOUT=100 \
  PIP_RETRIES=5 \
  PIP_CACHE_DIR=/tmp/pip-cache \
  DOCKER_BUILDKIT=1 \
  BUILDKIT_PROGRESS=plain

# Install system dependencies with maximum cache optimization (HIGH COMPATIBILITY)
RUN --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
  --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/tmp/pip-cache,sharing=locked \
  apt-get update && apt-get install -y --no-install-recommends \
  build-essential \
  git \
  curl \
  ca-certificates \
  && rm -rf /var/lib/apt/lists/* \
  && apt-get clean

# Create optimized working environment
WORKDIR /app

# Copy requirements with maximum layer caching efficiency (DRY principle)
COPY requirements.txt pyproject.toml ./

# Create ultra-optimized virtual environment with persistent caching
RUN --mount=type=cache,target=/tmp/pip-cache,sharing=locked \
  --mount=type=cache,target=/opt/venv-cache,sharing=locked \
  python -m venv /opt/venv --upgrade-deps \
  && /opt/venv/bin/pip install --upgrade pip setuptools wheel \
  && /opt/venv/bin/pip install --no-deps -r requirements.txt \
  && /opt/venv/bin/pip check

# Copy source code for bytecode precompilation
COPY src/ ./src/

# Ultra-performance bytecode precompilation (MODERNIZE principle)
RUN --mount=type=cache,target=/tmp/bytecode-cache,sharing=locked \
  /opt/venv/bin/python -m compileall -b -f -q src/ \
  && find src/ -name "*.py" -delete || true \
  && find src/ -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true \
  && mkdir -p /opt/precompiled \
  && cp -r src/* /opt/precompiled/ 2>/dev/null || true

# ============================================================================
# TOOLS STAGE - Development tools with ultra-aggressive caching
# ============================================================================
FROM builder AS tools

# Install development tools with persistent cache (LOW CODE principle)
RUN --mount=type=cache,target=/tmp/pip-cache,sharing=locked \
  /opt/venv/bin/pip install --no-deps \
  pytest pytest-cov pytest-xdist \
  ruff mypy pre-commit \
  black isort flake8 \
  httpx bandit safety

# Copy development configurations for caching
COPY .pre-commit-config.yaml ./

# Setup pre-commit hooks with persistent cache (IDEMPOTENCY principle)
RUN --mount=type=cache,target=/tmp/pre-commit-cache,sharing=locked \
  PRE_COMMIT_HOME=/tmp/pre-commit-cache /opt/venv/bin/pre-commit install-hooks || true

# ============================================================================
# RUNTIME STAGE - Ultra-minimal production image (LOW FOOTPRINT)
# ============================================================================
FROM python:${PYTHON_VERSION}-slim AS runtime

# Runtime environment (LIGHTWEIGHT principle)
ENV PYTHONUNBUFFERED=1 \
  PYTHONDONTWRITEBYTECODE=1 \
  PYTHONOPTIMIZE=2 \
  PATH="/opt/venv/bin:$PATH" \
  FLASK_APP=src.goldilocks.app \
  FLASK_ENV=production

# Minimal runtime dependencies with cache
RUN --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
  --mount=type=cache,target=/var/cache/apt,sharing=locked \
  apt-get update && apt-get install -y --no-install-recommends \
  curl ca-certificates \
  && rm -rf /var/lib/apt/lists/* \
  && apt-get clean

# Copy optimized virtual environment and precompiled code
COPY --from=builder /opt/venv /opt/venv
COPY --from=builder /opt/precompiled /app/src
COPY --from=builder /app /app

# Copy static assets
COPY frontend/static/ /app/static/

WORKDIR /app
EXPOSE 9000

# Ultra-efficient health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=2 \
  CMD curl -f http://localhost:9000/health || exit 1

# Optimized production command
CMD ["/opt/venv/bin/python", "-m", "gunicorn", "--bind", "0.0.0.0:9000", "--workers", "2", "src.goldilocks.app:app"]

# ============================================================================
# DEVCONTAINER STAGE - Ultra-performance development environment
# ============================================================================
FROM tools AS devcontainer

# Switch to root for devcontainer setup (STRUCTURED principle)
USER root

# Install additional development dependencies with cache (HIGH COMPATIBILITY)
RUN --mount=type=cache,target=/var/lib/apt/lists,sharing=locked \
  --mount=type=cache,target=/var/cache/apt,sharing=locked \
  apt-get update && apt-get install -y --no-install-recommends \
  sudo zsh vim less wget \
  && rm -rf /var/lib/apt/lists/* \
  && apt-get clean

# Ultra-performance development environment (MODERNIZE principle)
ENV PATH="/opt/venv/bin:$PATH" \
  FLASK_APP=src.goldilocks.app \
  FLASK_ENV=development \
  FLASK_DEBUG=1 \
  PYTHONPATH="/workspaces/Goldilocks/src" \
  PYTHONOPTIMIZE=0 \
  PYTHONDONTWRITEBYTECODE=0 \
  PIP_CACHE_DIR=/tmp/pip-cache \
  PRE_COMMIT_HOME=/tmp/pre-commit-cache \
  MYPY_CACHE_DIR=/tmp/mypy-cache \
  RUFF_CACHE_DIR=/tmp/ruff-cache \
  PYTEST_CACHE_DIR=/tmp/pytest-cache

# Create optimized cache directories (PERFORMANCE principle)
RUN mkdir -p /tmp/{pip,pre-commit,mypy,ruff,pytest,build,bytecode}-cache \
  /opt/precompiled /workspaces/Goldilocks

WORKDIR /workspaces/Goldilocks

# Ultra-performance default command
CMD ["/bin/bash"]
