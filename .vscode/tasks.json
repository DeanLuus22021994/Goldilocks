{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Run Flask (port 9000)",
      "type": "shell",
      "command": "flask --app app run --host 0.0.0.0 --port 9000 --no-debugger --no-reload",
      "options": { "env": { "FLASK_APP": "app.py" } },
      "problemMatcher": []
    },
    {
      "label": "Test: pytest",
      "type": "shell",
      "command": "pytest -q",
      "problemMatcher": []
    },
    {
      "label": "Test: watch (looponfail)",
      "type": "shell",
      "command": "pytest -q -f",
      "detail": "Requires pytest-xdist; reruns tests on file changes.",
      "problemMatcher": []
    },
    {
      "label": "Coverage",
      "type": "shell",
      "command": "pytest -q --cov=goldilocks --cov-report=term-missing --cov-report=xml",
      "problemMatcher": []
    },
    {
      "label": "Type check (mypy)",
      "type": "shell",
      "command": "mypy .",
      "problemMatcher": []
    },
    {
      "label": "Pre-commit (all files)",
      "type": "shell",
      "command": "pre-commit run --all-files",
      "problemMatcher": []
    },
    {
      "label": "DevContainer: Build Benchmark",
      "type": "shell",
      "command": "bash .benchmarks/devcontainer-build-benchmark.sh",
      "detail": "Run devcontainer build benchmark with progress output",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "DevContainer: Build Benchmark (JSON only)",
      "type": "shell",
      "command": "bash .benchmarks/devcontainer-build-benchmark.sh > .benchmarks/latest_benchmark.json && echo 'JSON output saved to .benchmarks/latest_benchmark.json' && cat .benchmarks/latest_benchmark.json",
      "detail": "Run devcontainer build benchmark and save JSON output to file",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "Docker: Start Development Environment",
      "type": "shell",
      "command": "docker compose --profile dev up -d",
      "options": {
        "cwd": "${workspaceFolder}/infrastructure/docker"
      },
      "detail": "Start full development environment (Flask + MariaDB + Adminer)",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "Docker: Start Production Environment",
      "type": "shell",
      "command": "docker compose --profile prod up -d",
      "options": {
        "cwd": "${workspaceFolder}/infrastructure/docker"
      },
      "detail": "Start production environment (Flask + MariaDB)",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "Docker: Start Database Only",
      "type": "shell",
      "command": "docker compose up -d goldilocks-db goldilocks-adminer",
      "options": {
        "cwd": "${workspaceFolder}/infrastructure/docker"
      },
      "detail": "Start MariaDB database and Adminer for development",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "Docker: Stop All Services",
      "type": "shell",
      "command": "docker compose down",
      "options": {
        "cwd": "${workspaceFolder}/infrastructure/docker"
      },
      "detail": "Stop all Docker Compose services",
      "problemMatcher": []
    },
    {
      "label": "Docker: View Logs",
      "type": "shell",
      "command": "docker compose logs -f",
      "options": {
        "cwd": "${workspaceFolder}/infrastructure/docker"
      },
      "detail": "View logs from all running services",
      "isBackground": true,
      "problemMatcher": []
    },
    {
      "label": "Docker: Rebuild and Restart",
      "type": "shell",
      "command": "docker compose down && docker compose --profile dev up -d --build",
      "options": {
        "cwd": "${workspaceFolder}/infrastructure/docker"
      },
      "detail": "Rebuild images and restart development environment",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Generate Modern Documentation",
      "type": "shell",
      "command": "python docs/generate.py",
      "detail": "Generate modern documentation using markitdown package",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Generate with Docker (markitdown)",
      "type": "shell",
      "command": "docker run --rm --mount type=bind,source=${workspaceFolder},target=/workspace --workdir /workspace python:3.12-slim sh -c 'pip install -q markitdown && python docs/generate.py'",
      "detail": "Generate documentation using Docker container with markitdown",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    },
    {
      "label": "Docs: Watch and Regenerate",
      "type": "shell",
      "command": "while inotifywait -e modify,create,delete -r . --exclude '(__pycache__|*.pyc|.git|docs/STRUCTURE.md|docs/TECHNICAL.md)' 2>/dev/null; do echo 'Files changed, regenerating documentation...'; python docs/generate.py; done",
      "detail": "Watch for file changes and automatically regenerate documentation",
      "isBackground": true,
      "group": {
        "kind": "build",
        "isDefault": false
      },
      "problemMatcher": []
    }
  ]
}
